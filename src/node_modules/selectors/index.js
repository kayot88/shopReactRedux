import * as R from 'ramda'

export const getActiveCategoryId = ownProps => {
  const categoryId = R.path(['match', 'params', 'id'], ownProps)
  return categoryId
}

export const getPhoneById = (state, id) => {
  return R.prop(id, state.phones)
}

export const getPhones = (state, ownProps) => {
  const searchItems = item => {
    return R.contains(state.phonesPage.search, item.name.toUpperCase())
  }
  const activeCategoryId = getActiveCategoryId(ownProps)
  const applyCategory = item =>
    R.equals(activeCategoryId, R.prop('categoryId', item))
  const phones = R.compose(
    R.filter(searchItems),
    R.when(R.always(activeCategoryId), R.filter(applyCategory)),
    R.map(id => getPhoneById(state, id))
  )(state.phonesPage.ids)
  return phones
}

export const getRenderedPhoneLength = state => {
  return state.phonesPage.ids.length
}

export const getCategories = state => {
  return R.values(state.categories)
}

export const totalCountInBasket = state => {
  return state.basket.length
}
export const totalSumInBasket = state => {
  const totalSum = R.compose(
    R.sum,
    R.pluck('price'),
    R.map(id => getPhoneById(state, id))
  )(state.basket)

  return totalSum
}

export const getPhonesByIdWithCount = state => {
  const uniqueIds = R.uniq(state.basket)
  const phoneCount = id =>
    R.compose(
      R.length,
      R.filter(basketId => R.equals(id, basketId)
      ))(state.basket)
  const phones = R.compose(
    R.map(phone => R.assoc('count', phoneCount(phone.id), phone)),
    R.map(id => getPhoneById(state, id))
  )(uniqueIds)
  return phones
}
